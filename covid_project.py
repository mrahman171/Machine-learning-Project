# -*- coding: utf-8 -*-
"""covid_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sf-76QPTaEBYcmsvdkYF35Ij83enrrk7
"""

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_csv('/content/Covid.csv')

df

a=pd.get_dummies(df['Fever'],drop_first=True)
b=pd.concat([a,df],axis=1)
b.drop('Fever',axis=1,inplace=True)
b.rename(columns={'Yes':'Fever'},inplace=True)
b

a=pd.get_dummies(df['Dry Cough'],drop_first=True)
c=pd.concat([a,b],axis=1)
c.drop('Dry Cough',axis=1,inplace=True)
c.rename(columns={'Yes':'Dry Cough'},inplace=True)
c

a=pd.get_dummies(df['Tiredness'],drop_first=True)
d=pd.concat([a,c],axis=1)
d.drop('Tiredness',axis=1,inplace=True)
d.rename(columns={'Yes':'Tiredness'},inplace=True)
d

a=pd.get_dummies(df['Running Noise'],drop_first=True)
e=pd.concat([a,d],axis=1)
e.drop('Running Noise',axis=1,inplace=True)
e.rename(columns={'Yes':'Running Noise'},inplace=True)
e

a=pd.get_dummies(df['Difficulty in Breathing'],drop_first=True)
f=pd.concat([a,e],axis=1)
f.drop('Difficulty in Breathing',axis=1,inplace=True)
f.rename(columns={'Yes':'Difficulty in Breathing'},inplace=True)
f

a=pd.get_dummies(df['Headache'],drop_first=True)
g=pd.concat([a,f],axis=1)
g.drop('Headache',axis=1,inplace=True)
g.rename(columns={'Yes':'Headache'},inplace=True)
g

a=pd.get_dummies(df['Sore Throat'],drop_first=True)
h=pd.concat([a,g],axis=1)
h.drop('Sore Throat',axis=1,inplace=True)
h.rename(columns={'Yes':'Sore Throat'},inplace=True)
h

a=pd.get_dummies(df['Loss of Smell or Taste'],drop_first=True)
i=pd.concat([a,h],axis=1)
i.drop('Loss of Smell or Taste',axis=1,inplace=True)
i.rename(columns={'Yes':'Loss of Smell or Taste'},inplace=True)

a=pd.get_dummies(df['Diarrhea'],drop_first=True)
j=pd.concat([a,i],axis=1)
j.drop('Diarrhea',axis=1,inplace=True)
j.rename(columns={'Yes':'Diarrhea'},inplace=True)

a=pd.get_dummies(df['Covid'],drop_first=True)
Cov=pd.concat([a,j],axis=1)
Cov.drop('Covid',axis=1,inplace=True)
Cov.rename(columns={'Yes':'Covid'},inplace=True)

Cov

Cov.head(20)

"""# Data Visualisation Using matplotlib



"""

fever=Cov[['Fever']]
Dry_Cough=Cov[['Dry Cough']]
tiredness=Cov[['Tiredness']]
running_noise=Cov[['Running Noise']]
difficulty_in_breathing=Cov[['Difficulty in Breathing']]
headache=Cov[['Headache']]
Sore_Throat=Cov[['Sore Throat']]
loss_of_smell_or_taste=Cov[['Loss of Smell or Taste']]
diarrhea=Cov[['Diarrhea']]
covid=Cov['Covid']
number=Cov['no']

plt.figure(figsize=(15,10))
plt.scatter(number,fever,marker='o',color='red',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,Dry_Cough,marker='+',color='g',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,tiredness,marker='+',color='b',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,running_noise,marker='+',color='black',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,difficulty_in_breathing,marker='+',color='pink',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,headache,marker='.',color='red',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,Sore_Throat,marker='.',color='blue',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,loss_of_smell_or_taste,marker='.',color='pink',s=5)

plt.figure(figsize=(15,10))
plt.scatter(number,diarrhea,marker='+',color='green',s=1)

plt.figure(figsize=(15,10))
plt.scatter(number,covid,marker='+',color='red',s=1)

"""# Set up input data and target data """

target=Cov.Covid
inputs=Cov.drop('Covid',axis='columns')
inputs=inputs.drop('no',axis='columns')
#inputs

target

"""**bold text**# **Split** the **dataset** **Into** **train** **And** **test**"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test= train_test_split(inputs,target,test_size=0.12)
X_train

Y_train

"""# Train the model Using Logistic regression"""

from sklearn.linear_model import LogisticRegression

model=LogisticRegression()

from google.colab import drive
drive.mount('/content/drive')

import math
from numpy import genfromtxt
import random

data_path='/content/drive/MyDrive/Colab Notebooks/Ai lab/assignment-2/Covid.csv'
my_data=genfromtxt(data_path,delimiter=',')
print(my_data)
import numpy as np
from google.colab import drive
drive.mount('/content/drive')
#theta function
theta = []
import random 
random.seed(1)
#x = df.data[:, :9]
#y = (iris.target != 0) * 1
sa
for i in range(9):
  R = random.uniform(0,1)
  theta.append(R)
print(theta)
lr = 0.0001
train_loss = []
#A=[]
B=[]

for iteration in range(0,1000):
  tj = 0 
  for i in range(len(X_train)):
    z = np.dot(X_train[i],theta)

    #sigmoid function
    h = 1 / (1 + math.exp(-z))
    #loss function
    j = (-Y_train[i] * np.log(h)) - ((1-Y_train[i]) * np.log(1-h))
    tj = tj + j
    #derivative
    dv = np.array(X_train[i])*(h-Y_train[i])
    #update theta
    theta = theta - (np.array(dv) * lr)
  
  tj = tj/len(x_train)
  #print(tj)
  train_loss.append(tj)
  #A.append(tj)
  B.append(iteration)
  
print(train_loss)
print(theta)

model.fit(X_train,Y_train)

model.score(X_test,Y_test)*100

"""## #** predict by The model** """

model.predict(X_test)

"""# ***Train the model using KNNeighbors***



"""

from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=22)
classifier.fit(X_train,Y_train)

classifier.score(X_test,Y_test)*100

"""# **Decision** **tree**"""

from sklearn import tree
Tree=tree.DecisionTreeClassifier()
Tree.fit(X_train,Y_train)



Tree.score(X_test,Y_test)*100

"""# **Random forest**"""

from sklearn.ensemble import RandomForestClassifier
Random_forest=RandomForestClassifier()

Random_forest.fit(X_train,Y_train)
Random_forest.score(X_test,Y_test)*100

