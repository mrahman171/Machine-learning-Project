# -*- coding: utf-8 -*-
"""ml_covid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ESfX-KSIkZcbpEfDXUJhSCbqrR6Ndck
"""

from google.colab import drive
drive.mount('/content/gdrive')

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.layers import *
from keras.models import * 
from keras.preprocessing import image

#Augmentation 
train_datagen = image.ImageDataGenerator(
    rescale = 1./255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
)

test_dataset = image.ImageDataGenerator(rescale=1./255)

#Set TRAIN Image data
train_generator = train_datagen.flow_from_directory(
    '/content/gdrive/MyDrive/dataset/CovidDataset/Train',
    target_size = (224,224),
    batch_size = 16,
    class_mode = 'binary')

#Check no of classes
print(f"No of classes in Test Dataset ===> {train_generator.class_indices}")

validation_generator = test_dataset.flow_from_directory(
    '/content/gdrive/MyDrive/dataset/CovidDataset/Val',
    target_size = (224,224),
    batch_size = 16,
    class_mode = 'binary')

print(f"No of classes in Test Dataset ===> {validation_generator.class_indices}")

# CNN Based Model in Keras

model = Sequential()
model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(224,224,3)))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(128,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss=keras.losses.binary_crossentropy,optimizer='adam',metrics=['accuracy'])

model.summary()

hist = model.fit_generator(
    train_generator,
    steps_per_epoch=8,
    epochs = 10,
    validation_data = validation_generator,
    validation_steps=2
)

"""# Training Loss graph"""

import matplotlib.pyplot as plt
loss = hist.history['loss']
val_loss = hist.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

"""# Training Accuracy"""

acc = hist.history['accuracy']
val_acc = hist.history['val_accuracy']
plt.plot(epochs, acc, 'y', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

#Test check
test_generator = test_dataset.flow_from_directory(
    '/content/gdrive/MyDrive/dataset/CovidDataset/Test',
    target_size = (224,224),
    batch_size = 16,
    class_mode = 'binary')

print(f"No of classes in Test Dataset ===> {test_generator.class_indices}")

loss, acc = model.evaluate_generator(test_generator)

print(f"Loss on Test Data ===> {loss}")

print(f"Acc on Test Data ===> {acc}")